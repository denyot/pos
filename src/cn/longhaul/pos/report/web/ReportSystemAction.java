/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package cn.longhaul.pos.report.web;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.eredlab.g4.ccl.datastructure.Dto;
import org.eredlab.g4.ccl.datastructure.impl.BaseDto;
import org.eredlab.g4.ccl.json.JsonHelper;
import org.eredlab.g4.ccl.util.G4Utils;
import org.eredlab.g4.rif.report.excel.ExcelExporter;
import org.eredlab.g4.rif.report.fcf.FcfDataMapper;
import org.eredlab.g4.rif.report.fcf.GraphConfig;
import org.eredlab.g4.rif.report.fcf.Set;
import org.eredlab.g4.rif.web.BaseAction;
import org.eredlab.g4.rif.web.CommonActionForm;

import cn.longhaul.pos.common.Common;
import cn.longhaul.sap.system.aig.AigRepository;
import cn.longhaul.sap.system.aig.AigTransferInfo;
import cn.longhaul.sap.system.aig.AigTransferParameter;
import cn.longhaul.sap.system.aig.AigTransferTable;
import cn.longhaul.sap.system.esb.hesssion.SapTransferImpl;

@SuppressWarnings({ "unused", "unchecked" })
public class ReportSystemAction extends BaseAction {
	// private ChoiceOrderService choiceOrderservice = (ChoiceOrderService)
	// getService("choiceOrderService");
	private static Log log = LogFactory.getLog(ReportSystemAction.class);
	private List<Dto> reasonDto = null;
	public ReportSystemAction() {
		reasonDto = g4Dao.queryForList("commonsqlmap.getReasons");
	}

	public ActionForward getTypeInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;

		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}

		List<Dto> typeList = g4Reader.queryForList("choiceOrder.getType");

		String jsonString = JsonHelper.encodeObject2Json(typeList);

		write(jsonString, response);

		return mapping.findForward(null);
	}
	public ActionForward getDanHistory(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;

		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}

		List<Dto> list = g4Reader.queryForList("report.getDanHistory",dto);

		String retStr = JsonHelper.encodeList2PageJson(list, 1,
		"yyyy-MM-dd hh:mm:ss");
		write(retStr, response);
		return mapping.findForward(null);
	}
	
	
	public ActionForward getGoodsInfoByMatnr(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;

		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));

		List<Dto> data = g4Reader.queryForList("report.getSHGoodsByMatnr", dto);
		List<Dto> list = new ArrayList<Dto>();
		
		if (G4Utils.isNotEmpty(data)) {
			for (int i = 0; i < data.size(); i++) {
				Dto goodsDto = new BaseDto();
				goodsDto.put("servicetime", data.get(i).get("recievedate"));
				goodsDto.put("servicetype", "收货");
				goodsDto.put("serviceno", data.get(i).get("id"));
				goodsDto.put("dcmd", data.get(i).get("werks"));
				goodsDto.put("goodsprice", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("total")) ? data.get(i).getAsString("total") : "0.0"));
				goodsDto.put("cw", data.get(i).get("lgort"));
				if ("G".equals(data.get(i).get("meins"))) {
					goodsDto.put("goodsweight", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("hpzl")) ? data.get(i).getAsString("hpzl") : "0.0"));
				} else {
					goodsDto.put("goodsweight", Double.parseDouble((G4Utils.isNotEmpty(data.get(i).getAsString("menge")) ? data.get(i).getAsString("menge") : "0.0")));
				}

				String zt = data.get(i).getAsString("kbstat");
				if ("02".equals(zt)) {
					goodsDto.put("pricestatus", "冻结");
				} else {
					goodsDto.put("pricestatus", "正常");
				}
				list.add(goodsDto);
			}
		}
		data.clear();
		data = g4Reader.queryForList("report.getTJGoodsByMatnr", dto);

		if (G4Utils.isNotEmpty(data)) {
			for (int i = 0; i < data.size(); i++) {
				Dto goodsDto = new BaseDto();
				goodsDto.put("servicetime", data.get(i).get("ztjrq"));
				goodsDto.put("servicetype", "调价");
				goodsDto.put("serviceno", data.get(i).get("ztjdh"));
				goodsDto.put("dcmd", data.get(i).get("werks"));
				goodsDto.put("goodsweight", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("hpzl")) ? data.get(i).getAsString("hpzl") : "0.0"));
				goodsDto.put("goodsprice", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("zrkjg")) ? data.get(i).getAsString("zrkjg") : "0.0"));
				String zt = data.get(i).getAsString("kbstat");
				if ("02".equals(zt)) {
					goodsDto.put("pricestatus", "冻结");
				} else {
					goodsDto.put("pricestatus", "正常");
				}
				list.add(goodsDto);
			}
		}

		data.clear();
		data = g4Reader.queryForList("report.getPDGoodsByMatnr", dto);

		if (G4Utils.isNotEmpty(data)) {
			for (int i = 0; i < data.size(); i++) {
				Dto goodsDto = new BaseDto();
				goodsDto.put("servicetime", data.get(i).get("starttime"));
				goodsDto.put("servicetype", "盘点");
				goodsDto.put("serviceno", data.get(i).get("id"));
				goodsDto.put("dcmd", data.get(i).get("werks"));
				goodsDto.put("goodsweight", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("labst")) ? data.get(i).getAsString("labst") : "0.0"));
				goodsDto.put("goodsprice", data.get(i).get("kbetr"));
				goodsDto.put("cw", data.get(i).get("lgort"));
				String zt = data.get(i).getAsString("kbstat");
				if ("02".equals(zt)) {
					goodsDto.put("pricestatus", "冻结");
				} else {
					goodsDto.put("pricestatus", "正常");
				}
				list.add(goodsDto);
			}
		}

		data.clear();
		data = g4Reader.queryForList("report.getDCGoodsByMatnr", dto);

		if (G4Utils.isNotEmpty(data)) {
			for (int i = 0; i < data.size(); i++) {
				Dto goodsDto = new BaseDto();
				goodsDto.put("servicetime", data.get(i).get("stockdate"));
				goodsDto.put("servicetype", "调出");
				goodsDto.put("serviceno", data.get(i).get("outid"));
				goodsDto.put("dcmd", data.get(i).get("outwerks"));
				goodsDto.put("goodsprice", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("tagprice")) ? data.get(i).getAsString("tagprice") : "0.0"));
				goodsDto.put("cw", data.get(i).get("outstock"));
				if ("G".equals(data.get(i).get("meins"))) {
					goodsDto.put("goodsweight", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("hpzl")) ? data.get(i).getAsString("hpzl") : "0.0"));
				} else {
					goodsDto.put("goodsweight", Double.parseDouble((G4Utils.isNotEmpty(data.get(i).getAsString("goodscount")) ? data.get(i).getAsString("goodscount") : "0.0")));
				}
				String zt = data.get(i).getAsString("kbstat");
				if ("02".equals(zt)) {
					goodsDto.put("pricestatus", "冻结");
				} else {
					goodsDto.put("pricestatus", "正常");
				}
				list.add(goodsDto);
			}
		}

		data.clear();
		data = g4Reader.queryForList("report.getXSGoodsByMatnr", dto);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if (G4Utils.isNotEmpty(data)) {
			for (int i = 0; i < data.size(); i++) {
				Dto goodsDto = new BaseDto();
				
				goodsDto.put("servicetime", sdf.format(data.get(i).getAsDate("operatedatetime")));
				goodsDto.put("servicetype", "销售");
				goodsDto.put("serviceno", data.get(i).get("salesorderid"));
				goodsDto.put("dcmd", data.get(i).get("operator"));
				goodsDto.put("goodsweight", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("hpzl")) ? data.get(i).getAsString("hpzl") : "0.0"));
				goodsDto.put("goodsprice", Double.parseDouble(G4Utils.isNotEmpty(data.get(i).get("amountcollected")) ? data.get(i).getAsString("amountcollected") : "0.0"));
				goodsDto.put("cw", data.get(i).get("storagelocation"));
				String zt = data.get(i).getAsString("kbstat");
				if ("02".equals(zt)) {
					goodsDto.put("pricestatus", "冻结");
				} else {
					goodsDto.put("pricestatus", "正常");
				}
				list.add(goodsDto);
			}
		}

		request.getSession().setAttribute("resultList", list);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" + jsonStr + "}";
		write(jsonStr, response);
		System.out.println(jsonStr);

		return mapping.findForward(null);
	}

	// 导出
	public ActionForward exportExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000);
		Dto parametersDto = new BaseDto();
		parametersDto.put("reportTitle", "商品历史追溯表");
		List fieldsList = (List) request.getSession().getAttribute("resultList");
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter.setTemplatePath("/report/excel/mytemplate/hisCatalogReport2.xls");
		excelExporter.setData(parametersDto, fieldsList);
		excelExporter.setFilename("商品历史追溯表.xls");
		excelExporter.export(request, response);

		return mapping.findForward(null);
	}
	
	//盘点差异
	public ActionForward getTakesDiversity(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;

		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		System.out.println(dto.get("pdtime"));
		List<Dto> data = g4Reader.queryForPage("report.getTakesDiversity", dto);
		int count = (Integer)g4Reader.queryForObject("report.getTakesDiversityCount",dto);
		for(int i = 0;i<data.size();i++){
			data.get(i).put("no", data.get(i).get("id"));
			data.get(i).remove("id");
			if(G4Utils.isEmpty(data.get(i).get("iftaking")) && G4Utils.isEmpty(data.get(i).get("remark"))){
				data.get(i).put("remark", "盘亏");
			}
			if(G4Utils.isNotEmpty(data.get(i).get("iftaking")) && G4Utils.isEmpty(data.get(i).get("remark"))){
				data.get(i).put("remark", "已盘");
			}
			
		}
		String jsonStr = JsonHelper.encodeList2PageJson(data, count, null);
		System.out.println(jsonStr);
		write(jsonStr, response);
		return mapping.findForward(null);
	}
	
	
	public ActionForward getYears(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Calendar calendar = Calendar.getInstance();
		int year = calendar.get(Calendar.YEAR);
		List<Dto> years = new ArrayList<Dto>();

		for(int i = 2009;i<= year;i++){
			Dto dto = new BaseDto();
			dto.put("value", i);
			dto.put("text", i + "年");
			years.add(dto);
		}
		
		String jsonStr = JsonHelper.encodeObject2Json(years);
		jsonStr = "{ROOT:" + jsonStr + "}";
		System.out.println(jsonStr);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	
	public ActionForward getSallingInfoByKondm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;
		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
			dto.put("werks", werks);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		
		
		List<Dto> retDtoList = null;
		if("1000".equals(werks)){
			retDtoList = g4Reader.queryForList("report.getSallingInfoByKondmFor1000", dto);
		}else{
			retDtoList = g4Reader.queryForList("report.getSallingInfoByKondm", dto);
		}
		String jsonString = JsonHelper.encodeObject2Json(retDtoList);
		write(jsonString, response);
		
		return mapping.findForward(null);
	}
	
	public ActionForward getSalesStatisticsByKondm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;
		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
			dto.put("werks", werks);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		List<Dto> retDtoList = null;
		if("1000".equals(werks)){
			retDtoList = g4Reader.queryForList("report.getSallingInfoByKondmFor1000", dto);
		}else{
			retDtoList = g4Reader.queryForList("report.getSallingInfoByKondm", dto);
		}
		int quarty = 0;
		int total = 0;
		for (int i = 0; i < retDtoList.size(); i++) {
			Dto retDto = retDtoList.get(i);
			quarty += retDto.getAsInteger("quarty");
			total += retDto.getAsInteger("total");
		}
		dto.clear();
		dto.put("kondmtext", "合计");
		dto.put("total", total);
		dto.put("quarty", quarty);
		retDtoList.add(dto);
		String jsonString = JsonHelper.encodeList2PageJson(retDtoList, 0, "");
		jsonString = Common.getNewString(werks, jsonString);
		write(jsonString, response);
		return mapping.findForward("salesStatistics");
	}
	
	public ActionForward salesStatisticsPicByKondm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		GraphConfig graphConfig = new GraphConfig();
		graphConfig.setCaption("各品类销售统计分析图");
//		graphConfig.setNumberPrefix("¥");
		HttpSession session = request.getSession();
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;
		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
			dto.put("werks", werks);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		List<Dto> retDtoList = null;
		if("1000".equals(werks)){
			retDtoList = g4Reader.queryForList("report.getSallingInfoByKondmFor1000", dto);
		}else{
			retDtoList = g4Reader.queryForList("report.getSallingInfoByKondm", dto);
		}
		List dataList = new ArrayList();
		for (int i = 0; i < retDtoList.size(); i++) {
			Dto dto3D = (BaseDto) retDtoList.get(i);
			Set set = new Set();
			if ("01".equals(dto3D.getAsString("kondm"))) {
				set.setName("镶嵌");
			} else {
				set.setName(dto3D.getAsString("kondmtext"));
			}
			set.setValue(dto3D.getAsString("total"));
			dataList.add(set);
		}
		String xmlString = FcfDataMapper.toFcfXmlData(dataList, graphConfig);
		Dto outDto = new BaseDto();
		outDto.put("success", new Boolean(true));
		outDto.put("xmlstring", xmlString);
		write(JsonHelper.encodeObject2Json(outDto), response);
		return mapping.findForward(null);
	}
	
	// 导出
	public ActionForward exportTakesDiversityExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000);
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;

		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		List<Dto> data = g4Reader.queryForList("report.getTakesDiversity", dto);
		for(int i = 0;i<data.size();i++){
			data.get(i).put("rowid",i);
			data.get(i).put("no", data.get(i).get("id"));
			data.get(i).remove("id");
			if(G4Utils.isEmpty(data.get(i).get("iftaking")) && G4Utils.isEmpty(data.get(i).get("remark"))){
				data.get(i).put("remark", "盘亏");
			}
			if(G4Utils.isNotEmpty(data.get(i).get("iftaking")) && G4Utils.isEmpty(data.get(i).get("remark"))){
				data.get(i).put("remark", "已盘");
			}
		}
		
		Dto parametersDto = new BaseDto();
		parametersDto.put("reportTitle", "盘点差异表");
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter.setTemplatePath("/report/excel/mytemplate/takesDiversity.xls");
		excelExporter.setData(parametersDto, data);
		excelExporter.setFilename("盘点差异表.xls");
		excelExporter.export(request, response);

		return mapping.findForward(null);
	}
	
	//验收差异统计
	public ActionForward getValiDiversity(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;
		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
			dto.put("werks", werks);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		
		List<Dto> list = null;
		List<Dto> countlist = null;
		List<Dto> totallist = null;
		if("2".equals(dto.get("diversitytype"))){
			list = g4Reader.queryForList("report.getValiAD",dto);
			countlist = g4Reader.queryForList("report.getADCount",dto);
			totallist = g4Reader.queryForList("report.getADTotalCount",dto);
		}else if("1".equals(dto.get("diversitytype"))){
			list = g4Reader.queryForList("report.getValiAJ",dto);
			countlist = g4Reader.queryForList("report.getAJCount",dto);
			totallist = g4Reader.queryForList("report.getAJTotalCount",dto);
		}
		
		
		
		for(int i = 0;i<list.size();i++){
			list.get(i).put("rowid",i);
			//按单查询
			if("2".equals(dto.get("diversitytype"))){
				int dcount = 0;
				int dtotalcount = 0;
				String ddiversityrate = "";
				
				for(int j = 0;j<countlist.size();j++){
					if(G4Utils.isEmpty(countlist.get(j).get("charg"))){
						dcount += countlist.get(j).getAsInteger("menge");
					}else{
						dcount += 1;
					}
				}
				
				for(int j = 0;j<totallist.size();j++){
					if(G4Utils.isEmpty(totallist.get(j).get("charg"))){
						dtotalcount += totallist.get(j).getAsInteger("menge");
					}else{
						dtotalcount += 1;
					}
				}
				
				try{
					ddiversityrate = ((dcount*100)/dtotalcount) + "%";
				}catch(Exception e){
					return mapping.findForward(null);
				}
				list.get(i).put("count", dcount);
				list.get(i).put("totalcount", dtotalcount);
				list.get(i).put("diversityrate", ddiversityrate);
				
				if(G4Utils.isNotEmpty(list.get(i).get("charg"))){
					list.get(i).put("menge", 1);
				}else{
					list.get(i).put("menge", list.get(i).getAsInteger("menge"));
				}
				
			//按件查询
			}else if("1".equals(dto.get("diversitytype"))){
				int jcount = 0;
				int jtotalcount = 0;
				String jdiversityrate = "";
				for(int j = 0;j<countlist.size();j++){
					if(G4Utils.isEmpty(countlist.get(j).get("charg"))){
						jcount += countlist.get(j).getAsInteger("goodscount");
					}else{
						jcount += 1;
					}
				}
				
				for(int j = 0;j<totallist.size();j++){
					if(G4Utils.isEmpty(totallist.get(j).get("charg"))){
						jtotalcount += totallist.get(j).getAsInteger("hgoodscount");
					}else{
						jtotalcount += 1;
					}
				}
				try{
					jdiversityrate = (jcount*100) / jtotalcount + "%";
				}catch(Exception e){
					mapping.findForward(null);
				}
				list.get(i).put("count", jcount);
				list.get(i).put("totalcount", jtotalcount);
				list.get(i).put("diversityrate", jdiversityrate);
				
				if(G4Utils.isNotEmpty(list.get(i).get("charg"))){
					list.get(i).put("goodscount", 1);
				}else{
					list.get(i).put("goodscount", list.get(i).getAsInteger("goodscount"));
				}
			}
			
		}
		
		request.getSession().setAttribute("ValiDiversity", list);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" + jsonStr + "}";
		System.out.println(jsonStr);
		write(jsonStr,response);
		return mapping.findForward(null);
		
	}
	
//	public ActionForward getCount(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
//		CommonActionForm aForm = (CommonActionForm) form;
//		HttpSession session = request.getSession();
//		Dto dto = aForm.getParamAsDto(request);
//		String werks = null;
//		Dto totalDto = new BaseDto();
//		try {
//			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
//			dto.put("werks", werks);
//		} catch (Exception e) {
//			e.printStackTrace();
//			return mapping.findForward("authorization");
//		}
//		
//		if("2".equals(dto.get("diversitytype"))){
//			totalDto.put("count", (Integer)g4Reader.queryForObject("report.getADCount",dto));
//			totalDto.put("totalcount", (Integer)g4Reader.queryForObject("report.getADTotalCount",dto));
//		}else if("1".equals(dto.get("diversitytype"))){
//			
//		}
//		
//		try{
//			totalDto.put("diversityrate", (totalDto.getAsInteger("count")/totalDto.getAsInteger("totalcount") + "%"));
//		}catch(Exception e){
//			return mapping.findForward(null);
//		}
//		
//		String jsonStr = JsonHelper.encodeObject2Json(totalDto);
//		System.out.println("jsonStr" + jsonStr);
//		write(jsonStr,response);
//		
//		return mapping.findForward(null);
//	}

	
	// 导出
	public ActionForward exportValiDiversityExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000);
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		
		Dto parametersDto = new BaseDto();
		parametersDto.put("reportTitle", "验收差异统计表");
		List<Dto> fieldsList = (List) request.getSession().getAttribute("ValiDiversity");
		ExcelExporter excelExporter = new ExcelExporter();
		if("1".equals(dto.getAsString("cylx"))){
			excelExporter.setTemplatePath("/report/excel/mytemplate/ValiDiversity1.xls");
		}else if("2".equals(dto.getAsString("cylx"))){
			excelExporter.setTemplatePath("/report/excel/mytemplate/ValiDiversity2.xls");
		}
		
		parametersDto.put("count", fieldsList.get(0).get("count"));
		parametersDto.put("totalcount", fieldsList.get(0).get("totalcount"));
		parametersDto.put("diversityrate", fieldsList.get(0).get("diversityrate"));
		
		excelExporter.setData(parametersDto, fieldsList);
		excelExporter.setFilename("验收差异统计表.xls");
		excelExporter.export(request, response);

		return mapping.findForward(null);
	}
	
	public ActionForward getZone(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = dto.getAsString("WERKS");

		List<Dto> typeList = g4Reader.queryForList("report.getZone");

		String jsonString = JsonHelper.encodeObject2Json(typeList);

		write(jsonString, response);

		return mapping.findForward(null);
	}

	
	public ActionForward getSaleInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = null;
		try {
			werks = super.getSessionContainer(request).getUserInfo().getCustomId();
			dto.put("werks", werks);
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("authorization");
		}
		List<Dto> list = g4Reader.queryForList("report.getSalesSummary",dto);
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		for(int i=0;i<list.size();i++){
			String date = format.format(list.get(i).get("saletime"));
			list.get(i).put("saletime", date);
		}
		
		request.getSession().setAttribute("saleInfo", list);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		System.out.println(jsonStr);
		write(jsonStr,response);
		
		return mapping.findForward(null);
	}
	
	// 导出
	public ActionForward exportSaleInfoExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000);
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		
		Dto parametersDto = new BaseDto();
		parametersDto.put("reportTitle", "促销活动总结表");
		List<Dto> fieldsList = (List) request.getSession().getAttribute("saleInfo");
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter.setTemplatePath("/report/excel/mytemplate/SaleInfo.xls");
		
		excelExporter.setData(parametersDto, fieldsList);
		excelExporter.setFilename("促销活动总结表.xls");
		excelExporter.export(request, response);

		return mapping.findForward(null);
	}
	
	
	public ActionForward getOutStockHeaderForNeedPrintLabel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		if(G4Utils.isEmpty(dto.get("outtimee"))){
			dto.put("outtimee", G4Utils.getCurrentTime("yyyy-MM-dd"));
		}
		List<Dto> list = g4Reader.queryForPage("report.getOutStockHeaderForNeedPrintLabel", dto);
		Integer count = (Integer) g4Reader.queryForObject("report.getOutStockHeaderForNeedPrintLabelCount", dto);
		for (int i = 0; i < list.size(); i++) {
			Integer totalcount = 0;
			Double totalweight = 0.0;
			List<Dto> items = g4Reader.queryForList("report.getInStockDetailForValidate", list.get(i));
			for (int j = 0; j < items.size(); j++) {
				Dto item = items.get(j);
				if ("G".equals(item.getAsString("meins"))) {
					totalcount++;
					totalweight += Double.parseDouble(item.getAsString("goodscount"));
				} else {
					totalcount += item.getAsInteger("goodscount");
					totalweight += Double.parseDouble(G4Utils.isEmpty(item.get("hpzl")) ? "0" : item.getAsString("hpzl"));
				}
			}

			list.get(i).put("totalcount", totalcount);
			list.get(i).put("totalweight", totalweight);
			list.get(i).put("statusStr", getStatusStr(list.get(i).getAsInteger("status")));
			list.get(i).put("reason", list.get(i).get("headreason"));
			list.get(i).put("reasonStr", getReasonStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("inwerks"));
			list.get(i).put("inwerksStr", getWerksStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("outwerks"));
			list.get(i).put("outwerksStr", getWerksStr(list.get(i)));
		}

		String retStr = JsonHelper.encodeList2PageJson(list, count, "yyyy-MM-dd");

		System.out.println(retStr);

		write(retStr, response);

		return mapping.findForward(null);
	}
	
	
	public ActionForward getInStockDetailForValidate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		System.out.println(werks);

		List<Dto> list = g4Reader.queryForList("stocksystem.getInStockDetailForValidate", dto);

		for (int i = 0; i < list.size(); i++) {
			if ("G".equals(list.get(i).get("meins"))) {
				list.get(i).put("count", 1);
				list.get(i).put("hpzl", list.get(i).get("goodscount"));
			} else {
				list.get(i).put("count", list.get(i).get("goodscount"));
			}

			list.get(i).put("goldTypeStr", getGoldTypeStr(list.get(i).getAsString("zjlbm")));
			list.get(i).put("toneTypeStr", getToneTypeStr(list.get(i).getAsString("zslbm")));
			list.get(i).put("toneNeatNessStr", getToneNeatNessStr(list.get(i).getAsString("labor")));
			list.get(i).put("toneColorStr", getToneColorStr(list.get(i).getAsString("zslys")));
			list.get(i).put("lgort", list.get(i).get("outstock"));
			list.get(i).put("werks", list.get(i).get("outwerks"));
			list.get(i).put("lgortStr", getLgortStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("inwerks"));
			list.get(i).put("inwerksStr", getWerksStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("outwerks"));
			list.get(i).put("outwerksStr", getWerksStr(list.get(i)));
			// list.get(i).put("count", dto.get("count"));
		}

		String retStr = JsonHelper.encodeObject2Json(list);

		retStr = "{ROOT:" + retStr + "}";

		System.out.println(retStr);
		retStr = Common.getNewString(werks, retStr);
		write(retStr, response);

		return mapping.findForward(null);
	}
	
	// 获取库位描述
	private String getLgortStr(Dto dtoParam) {
		String retStr = "";
		Dto dto = (Dto) g4Dao.queryForObject("commonsqlmap.getLgortStr", dtoParam);
		retStr = dto == null ? "" : dto.getAsString("lgobe") + '-' + dto.getAsString("lgort");
		return retStr;
	}
	
	// 获取石料净度描述
	private String getToneNeatNessStr(String toneNeatNess) {
		String retStr = "";
		// Dto dto = (Dto)
		// g4Dao.queryForObject("commonsqlmap.getToneNeatNessStr",
		// toneNeatNess);
		// retStr = dto == null ? "" : dto.getAsString("tsljd") + '-' +
		// dto.getAsString("zsljd");
		retStr = Common.getToneNeatNess(toneNeatNess);
		return retStr;
	}

	// 获取石料颜色描述
	private String getToneColorStr(String toneColor) {
		String retStr = "";
		// Dto dto = (Dto) g4Dao.queryForObject("commonsqlmap.getToneColorStr",
		// toneColor);
		// retStr = dto == null ? "" : dto.getAsString("tslys") + '-' +
		// dto.getAsString("zslys");
		retStr = Common.getToneColor(toneColor);
		return retStr;
	}
	
	// 获取石料描述
	private String getToneTypeStr(String toneType) {
		String retStr = "";
		// Dto dto = (Dto) g4Dao.queryForObject("commonsqlmap.getToneTypeStr",
		// toneType);
		// retStr = dto == null ? "" : dto.getAsString("tslbm") + '-' +
		// dto.getAsString("zslbm");
		retStr = Common.getToneType(toneType);
		return retStr;
	}
	
	// 获取金料描述
	private String getGoldTypeStr(String goldType) {
		String retStr = "";
		// Dto dto = (Dto) g4Dao.queryForObject("commonsqlmap.getGoldTypeStr",
		// goldType);
		// retStr = dto == null ? "" : dto.getAsString("zjlms") + '-' +
		// dto.getAsString("zjlbn");
		retStr = Common.getGoldType(goldType);
		return retStr;
	}
	
	// 获取库位描述
	private String getWerksStr(Dto dtoParam) {
		String retStr = "";
		retStr = Common.getWerks(dtoParam.getAsString("werks"));
		return retStr;
	}

	private String getReasonStr(Dto dtoParam) {
		if (reasonDto == null) {
			reasonDto = g4Dao.queryForList("commonsqlmap.getReasons");
		}
		String retStr = "";
		String reasons[] = dtoParam.get("reason") != null ? dtoParam.getAsString("reason").split(",") : null;
		if (reasons != null) {
			for (int i = 0; i < reasons.length; i++) {
				for (int j = 0; j < reasonDto.size(); j++) {
					Dto reason = reasonDto.get(j);
					if (reasons[i].equals(reason.getAsString("id"))) {
						retStr += reason.getAsString("id") + ":" + reason.getAsString("description");
						if (i != reasons.length - 1) {
							retStr += "<br/>";
						}
						break;
					}
				}
			}
		}
		return retStr;
	}
	
	private String getStatusStr(int status) {
		String retStr = "";
		switch (status) {
		case 0:
			retStr = "待审核";
			break;
		case 1:
			retStr = "待发货";
			break;
		case 2:
			retStr = "已发货";
			break;
		case 3:
			retStr = "驳回";
			break;
		case 4:
			retStr = "已收货";
			break;
		case 5:
			retStr = "待整单差异处理";
			break;
		case 6:
			retStr = "待单行差异处理";
			break;
		case 7:
			retStr = "整单差异处理反馈";
			break;
		case 8:
			retStr = "单行差异处理反馈";
			break;
		case 9:
			retStr = "整单差异处理反馈完成";
			break;
		case 10:
			retStr = "单行差异处理反馈完成";
			break;
		case 11:
			retStr = "门店退货待审批";
			break;
		case 12:
			retStr = "门店退货待发货";
			break;
		case 13:
			retStr = "门店退货审批驳回";
			break;
		case 14:
			retStr = "门店退货完成";
			break;
		}
		return retStr;
	}
	
	public ActionForward getOutStockHeaderForValidate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		List<Dto> list = g4Reader.queryForPage("report.getOutStockHeaderForValidate", dto);
		Integer count = (Integer) g4Reader.queryForObject("report.getOutStockHeaderForValidateCount", dto);
		for (int i = 0; i < list.size(); i++) {
			Integer totalcount = 0;
			Double totalweight = 0.0;
			List<Dto> items = g4Reader.queryForList("report.getInStockDetail", list.get(i));
			for (int j = 0; j < items.size(); j++) {
				Dto item = items.get(j);
				if ("G".equals(item.getAsString("meins"))) {
					totalcount++;
					totalweight += Double.parseDouble(item.getAsString("goodscount"));
				} else {
					totalcount += item.getAsInteger("goodscount");
					totalweight += Double.parseDouble(G4Utils.isEmpty(item.get("hpzl")) ? "0" : item.getAsString("hpzl"));
				}
			}
			String gsyq = list.get(i).getAsString("gsyq");
			list.get(i).put("gsyq", "公司要求");
			if(gsyq.equals("1")){
				list.get(i).put("gsyq", "门店要求");
			}
			list.get(i).put("totalcount", totalcount);
			list.get(i).put("totalweight", totalweight);
			list.get(i).put("statusStr", getStatusStr(list.get(i).getAsInteger("status")));
			list.get(i).put("reason", list.get(i).get("headreason"));
			list.get(i).put("reasonStr", getReasonStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("inwerks"));
			list.get(i).put("inwerksStr", getWerksStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("outwerks"));
			list.get(i).put("outwerksStr", getWerksStr(list.get(i)));
		}
		String retStr = JsonHelper.encodeList2PageJson(list, count, "yyyy-MM-dd");
		write(retStr, response);
		return mapping.findForward(null);
	}
	
	public ActionForward outStockHeaderExportExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000L);
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		List<Dto> list = g4Reader.queryForPage("report.getOutStockHeaderForValidate", dto);
		Integer count = (Integer) g4Reader.queryForObject("report.getOutStockHeaderForValidateCount", dto);
		for (int i = 0; i < list.size(); i++) {
			Integer totalcount = 0;
			Double totalweight = 0.0;
			List<Dto> items = g4Reader.queryForList("report.getInStockDetail", list.get(i));
			for (int j = 0; j < items.size(); j++) {
				Dto item = items.get(j);
				if ("G".equals(item.getAsString("meins"))) {
					totalcount++;
					totalweight += Double.parseDouble(item.getAsString("goodscount"));
				} else {
					totalcount += item.getAsInteger("goodscount");
					totalweight += Double.parseDouble(G4Utils.isEmpty(item.get("hpzl")) ? "0" : item.getAsString("hpzl"));
				}
			}
			list.get(i).put("totalcount", totalcount);
			list.get(i).put("totalweight", totalweight);
			list.get(i).put("statusStr", "已审核");
			list.get(i).put("werks", list.get(i).get("inwerks"));
			list.get(i).put("inwerksStr", getWerksStr(list.get(i)));
			list.get(i).put("werks", list.get(i).get("outwerks"));
			list.get(i).put("outwerksStr", getWerksStr(list.get(i)));
		}
		Dto parametersDto = new BaseDto();
		if(dto.getAsString("type") != null && dto.getAsString("type").equals("db")){
			parametersDto.put("reportTitle", "总部审核调拨表");
		} else {
			parametersDto.put("reportTitle", "总部审核退货表");
		}
		parametersDto.put("jbr", super.getSessionContainer(request).getUserInfo().getUsername());
		parametersDto.put("jbsj", G4Utils.getCurrentTime());
		parametersDto.put("countXmid", new Integer(list.size()));
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter.setTemplatePath("/longhaul/pos/report/template/outStockHeaderReport.xls");
		excelExporter.setData(parametersDto, list);
		if(dto.getAsString("type") != null && dto.getAsString("type").equals("db")){
			excelExporter.setFilename("总部审核调拨表.xls");
		} else {
			excelExporter.setFilename("总部审核退货表.xls");
		}
		excelExporter.export(request, response);
		return mapping.findForward(null);
	}
	
	public ActionForward getWerksInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		List<Dto> list = g4Reader.queryForList("report.getWerksInfo",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 取门店对应的商品定价组  */
	public ActionForward getKondmInfoByWerks(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		List list = this.g4Dao.queryForList("report.getKondmInfoByWerks",dto);
		String jsonString = JsonHelper.encodeObject2Json(list);
		write(jsonString, response);
		return mapping.findForward(null);
	}
	
	/** 取石料颜色  */
	public ActionForward getStoneColorList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		List list = this.g4Dao.queryForList("report.getStoneColorList");
		String jsonString = JsonHelper.encodeObject2Json(list);
		write(jsonString, response);
		return mapping.findForward(null);
	}
	
	/** 取石料净度  */
	public ActionForward getStoneLaborList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		List list = this.g4Dao.queryForList("report.getStoneLaborList");
		Dto emptyDto = new BaseDto();
		String jsonString = JsonHelper.encodeObject2Json(list);
		write(jsonString, response);
		return mapping.findForward(null);
	}
	
	/** 取石料列表  */
	public ActionForward getStoneList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		List list = this.g4Dao.queryForList("report.getStoneList");
		Dto emptyDto = new BaseDto();
		String jsonString = JsonHelper.encodeObject2Json(list);
		write(jsonString, response);
		return mapping.findForward(null);
	}
	
	/** 取金料列表  */
	public ActionForward getGoldList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		List list = this.g4Dao.queryForList("report.getGoldList");
		String jsonString = JsonHelper.encodeObject2Json(list);
		write(jsonString, response);
		return mapping.findForward(null);
	}
	
	/** 取货品款式列表  */
	public ActionForward getGoodStyleList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		List list = this.g4Dao.queryForList("report.getGoodStyleList");
		Dto emptyDto = new BaseDto();
		String jsonString = JsonHelper.encodeObject2Json(list);
		write(jsonString, response);
		return mapping.findForward(null);
	}
	
	
	/** 收货差异统计*/
	public ActionForward getReceveDiffCount(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		List<Dto> list = g4Reader.queryForPage("report.getReceveDiffCount",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 收货差异统计导出EXCEL */
	public ActionForward exportReceiveDiffCountExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000L);
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		List<Dto> list = g4Reader.queryForPage("report.getReceveDiffCount", dto);
		Dto parametersDto = new BaseDto();
		parametersDto.put("reportTitle", "收货差异统计表");
		parametersDto.put("jbr", super.getSessionContainer(request).getUserInfo().getUsername());
		parametersDto.put("jbsj", G4Utils.getCurrentTime());
		parametersDto.put("countXmid", new Integer(list.size()));
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter.setTemplatePath("/longhaul/pos/report/template/ReceiveDiffCountReport.xls");
		excelExporter.setData(parametersDto, list);
		excelExporter.setFilename("收货差异统计表.xls");
		excelExporter.export(request, response);
		return mapping.findForward(null);
	}
	
	/** 调拨差异统计*/
	public ActionForward getTransferDiffCount(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		List<Dto> list = g4Reader.queryForPage("report.getTransferDiffCount",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 调拨差异统计导出EXCEL */
	public ActionForward exportTransferDiffCountExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		Thread.sleep(2000L);
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		dto.put("currentDate", G4Utils.getCurrentTime("yyyy-MM-dd"));
		List<Dto> list = g4Reader.queryForPage("report.getTransferDiffCount", dto);
		Dto parametersDto = new BaseDto();
		parametersDto.put("reportTitle", "调拨差异统计表");
		parametersDto.put("jbr", super.getSessionContainer(request).getUserInfo().getUsername());
		parametersDto.put("jbsj", G4Utils.getCurrentTime());
		parametersDto.put("countXmid", new Integer(list.size()));
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter.setTemplatePath("/longhaul/pos/report/template/ReceiveDiffCountReport.xls");
		excelExporter.setData(parametersDto, list);
		excelExporter.setFilename("调拨差异统计表.xls");
		excelExporter.export(request, response);
		return mapping.findForward(null);
	}
	
	/** 取所有品牌*/
	public ActionForward getBrandList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		List<Dto> list = g4Reader.queryForList("report.getBrandList",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 修改品牌*/
	public ActionForward updateBrand(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto retDto = new BaseDto();
		Dto dto = aForm.getParamAsDto(request);
		int a = g4Dao.update("report.updateBrand",dto);
		if(a == 1) {
			retDto.put("message", "更新成功！");
		} else {
			retDto.put("message", "更新失败！");
		}
		String jsonStr = JsonHelper.encodeObject2Json(retDto);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 添加品牌*/
	public ActionForward saveBrand(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto retDto = new BaseDto();
		Dto dto = aForm.getParamAsDto(request);
		try{
			List<Dto> list = g4Reader.queryForList("report.ifExistBrandId", dto);
			if(!list.isEmpty() || list.size() != 0){
				retDto.put("message", "品牌编码已存在，不能重复！");
				String jsonStr = JsonHelper.encodeObject2Json(retDto);
				write(jsonStr,response);
				return mapping.findForward(null);
			}
			g4Dao.insert("report.saveBrand",dto);
			retDto.put("message", "更新成功！");
		}catch (Exception e) {
			retDto.put("message", e.getMessage());
			e.printStackTrace();
		}
		String jsonStr = JsonHelper.encodeObject2Json(retDto);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 删除品牌*/
	public ActionForward deleteBrand(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto retDto = new BaseDto();
		Dto dto = aForm.getParamAsDto(request);
		String delString[] = dto.getAsString("strChecked").split(",");
		String delStr = "";
		if(delString.length > 0){
			for(int i = 0; i < delString.length; i++){
				delStr += delString[i] + ",";
			}
		}
		delStr = delStr.substring(0, delStr.length() - 1);
		dto.put("delStr", delStr);
		int a = g4Dao.delete("report.deleteBrand",dto);
		if(a == 1) {
			retDto.put("message", "删除成功！");
		} else {
			retDto.put("message", "删除失败！");
		}
		String jsonStr = JsonHelper.encodeObject2Json(retDto);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 根据门店、时间取排名信息*/
	public ActionForward getSalesRankingInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		List<Dto> list = g4Reader.queryForList("report.getSalesRankingInfo",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 根据门店取绑定的品牌*/
	public ActionForward getBrandRelationByWerks(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		List<Dto> list = g4Reader.queryForList("report.getBrandRelationByWerks",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 保存门店 品牌绑定关系*/
	public ActionForward saveBrandRelationByWerks(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		Dto retDto = new BaseDto();
		JSONArray items = JSONArray.fromObject(dto.get("jsonArray").toString());
		if(items != null){
			String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
			dto.put("werks", werks);
			try {
				int a = g4Dao.delete("report.deleteBrandRelationByWerks",dto);
				Dto idto = new BaseDto();
				for (int i = 0; i < items.size(); i++) {
					JSONObject jsonItem = (JSONObject) items.get(i);
					idto.put("brand", jsonItem.get("id"));
					idto.put("werks", werks);
					g4Dao.insert("report.saveBrandRelationByWerks",idto);
				}
				retDto.put("message", "绑定成功！");
			} catch (Exception e) {
				retDto.put("message", e.getMessage());
				e.printStackTrace();
			}
		}
		String jsonStr = JsonHelper.encodeObject2Json(retDto);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 保存销售排名*/
	public ActionForward saveSalesRanking(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		Dto retDto = new BaseDto();
		JSONArray items = JSONArray.fromObject(dto.get("jsonArray").toString());
		String message = "";
		if(items != null){
			dto.put("werks", super.getSessionContainer(request).getUserInfo().getCustomId());
			try {
				int a = g4Dao.delete("report.deleteSalesRanking",dto);
				Dto idto = new BaseDto();
				for (int i = 0; i < items.size(); i++) {
					JSONObject jsonItem = (JSONObject) items.get(i);
					idto.put("brand", jsonItem.get("brand"));
					idto.put("kbetr", jsonItem.get("kbetr"));
					idto.put("ranking", jsonItem.get("ranking"));
					idto.put("werks", dto.getAsString("werks"));
					idto.put("year", dto.getAsString("year"));
					idto.put("month", dto.getAsString("month"));
					idto.put("createtime", G4Utils.getCurrentTime("yyyy-MM-dd hh:mm:ss"));
					idto.put("createuser", super.getSessionContainer(request).getUserInfo().getAccount());
					g4Dao.insert("report.saveSalesRankingByWerks",idto);
				}
				message = "添加成功！";
				
				AigTransferInfo rfcInfo = AigRepository.getTransferInfo();
				AigTransferTable rfcTableRanking = rfcInfo.getTable("IT_ITEM");
				for (int i = 0; i < items.size(); i++) {
					JSONObject jsonItem = (JSONObject) items.get(i);
					Dto bDto = new BaseDto();
					bDto.put("brand", jsonItem.get("brand"));
					Dto brandName = (Dto) g4Dao.queryForObject("report.getBrandNameByBrand", bDto);
					rfcTableRanking.setValue("BRAND", brandName.getAsString("brand"));
					rfcTableRanking.setValue("KBETR", jsonItem.get("kbetr"));
					rfcTableRanking.setValue("RANKING", jsonItem.get("ranking"));
					rfcTableRanking.setValue("WERKS", dto.getAsString("werks"));
					rfcTableRanking.setValue("ZYEAR", dto.getAsString("year"));
					rfcTableRanking.setValue("ZMONTH", dto.getAsString("month"));
					rfcTableRanking.setValue("CREATETIME", G4Utils.getCurrentTime("yyyyMMdd"));
					rfcTableRanking.setValue("CREATEUSER", super.getSessionContainer(request).getUserInfo().getAccount());
					
					rfcTableRanking.appendRow();
				}
				rfcInfo.appendTable(rfcTableRanking);
				SapTransferImpl transfer = new SapTransferImpl();
			    AigTransferInfo out = transfer.transferInfoAig("Z_RFC_STORE_59", rfcInfo);
			    String isOk = out.getParameters("L_OK").toString();
			    if("1".equals(isOk)){
			    	message += "调用接口成功！";
			    } else {
			    	message += "调用接口失败！";
			    }
				
			} catch (Exception e) {
				retDto.put("message", e.getMessage());
				e.printStackTrace();
			}
		}
		retDto.put("message", message);
		String jsonStr = JsonHelper.encodeObject2Json(retDto);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 进销存汇总表*/
	public ActionForward getSaleAndStorageGroupKondm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		dto.put("werks", super.getSessionContainer(request).getUserInfo().getCustomId());
		List<Dto> list = g4Reader.queryForList("report.getSaleAndStorageGroupKondm",dto);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	/** 销售打印*/
	public ActionForward getSaleAndprintAll(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String custom = super.getSessionContainer(request).getUserInfo().getCustomId();
		String[] werkss = null;
		if(custom.equals("1000")){
			werkss = dto.getAsString("werkss").split(",");
		}else{
			werkss=custom.split(",");
		}

		dto.put("werkss", werkss);
		List<Dto> list = g4Reader.queryForList("report.getSaleAndprintAll",dto);
		String ifEnough = dto.getAsString("ifEnough");
		if(!ifEnough.equals("")){
			for (int i = list.size()-1; i >=0; i--) {
				Dto  dto2 = list.get(i);
				if(ifEnough.equals("0")){
					System.out.println("cnt:"+dto2.getAsString("cnt"));
					if(!dto2.getAsString("cnt").equals("")){//未打印
						list.remove(i);
					}
				}else{
					if(dto2.getAsString("cnt").equals("")){//打印
						list.remove(i);
					}
				}
			}
		}
			
		
		
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 修改销售打印*/
	public ActionForward editSaleAndprint(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		HttpSession session = request.getSession();
		Dto dto = aForm.getParamAsDto(request);
		String custom = super.getSessionContainer(request).getUserInfo().getCustomId();
		Dto retDto = new BaseDto();
		int a = 0;
		Dto dtosing = (Dto) g4Reader.queryForObject("report.getSaleAndprintSinggle",dto);
		if(dtosing==null){
			g4Dao.insert("report.insertSaleAndprint",dto);
		}
		a = g4Dao.update("report.editSaleAndprint",dto);
		if(a == 1) {
			retDto.put("success", true);
			retDto.put("message", "更新成功！");
		} else {
			retDto.put("message", "更新失败！");
		}
		String jsonStr = JsonHelper.encodeObject2Json(retDto);
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/**
	 * 打印单导出
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward exportPrintDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String custom = super.getSessionContainer(request).getUserInfo()
				.getCustomId();
		
		String[] werkss = null;
		if(custom.equals("1000")){
			werkss = dto.getAsString("werkss").split(",");
		}else{
			werkss=custom.split(",");
		}

		dto.put("werkss", werkss);
		List<Dto> list = g4Reader.queryForList("report.getSaleAndprintAll",dto);
		String ifEnough = dto.getAsString("ifEnough");
		if(!ifEnough.equals("")){
			for (int i = list.size()-1; i >=0; i--) {
				Dto  dto2 = list.get(i);
				if(ifEnough.equals("0")){
					System.out.println("cnt:"+dto2.getAsString("cnt"));
					if(!dto2.getAsString("cnt").equals("")){//未打印
						list.remove(i);
					}
				}else{
					if(dto2.getAsString("cnt").equals("")){//打印
						list.remove(i);
					}
				}
			}
		}
		
		Dto parametersDto = new BaseDto();
		ExcelExporter excelExporter = new ExcelExporter();
		excelExporter
				.setTemplatePath("/report/excel/mytemplate/print.xls");
		parametersDto.put("reportTitle", "终端销售打印情况表");
		parametersDto.put("jbr", super.getSessionContainer(request).getUserInfo().getUsername());
		parametersDto.put("jbsj",G4Utils.getCurrentTime("yyyyMMdd"));
		
		excelExporter.setFilename("终端销售打印情况表.xls");
		excelExporter.setData(parametersDto, list);
		excelExporter.export(request, response);

		return mapping.findForward(null);
	}
	
	
	public ActionForward getSaleAndprintAllWerks(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {

		List<Dto> list = g4Reader.queryForList("report.getSaleAndprintAllWerks",null);
		String jsonStr = JsonHelper.encodeObject2Json(list);
		jsonStr = "{ROOT:" +jsonStr+ "}";
		write(jsonStr,response);
		return mapping.findForward(null);
	}
	
	/** 销售明细表*/
	public ActionForward getSaleOrderList(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		if(!G4Utils.isEmpty(dto.get("kondms"))){
			String[] kondms = dto.get("kondms").toString().split(",");
			dto.put("kondms", kondms);
		} else {
			dto.put("kondms", null);
		}
		if(!G4Utils.isEmpty(dto.get("ordertype"))){
			String[] ordertype = dto.get("ordertype").toString().split(",");
			dto.put("ordertype", ordertype);
		} else {
			dto.put("ordertype", null);
		}
		List list = this.g4Reader.queryForPage("report.getSaleOrderList", dto);
		Integer count = (Integer) this.g4Reader.queryForObject("report.getSaleOrderListCount", dto);
		String retStr = JsonHelper.encodeList2PageJson(list, count, "yyyy-MM-dd");
		write(retStr, response);
		return mapping.findForward(null);
	}
	
	/** 货品库存信息表*/
	public ActionForward getStoreInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		CommonActionForm aForm = (CommonActionForm) form;
		Dto dto = aForm.getParamAsDto(request);
		String werks = super.getSessionContainer(request).getUserInfo().getCustomId();
		dto.put("werks", werks);
		if(!G4Utils.isEmpty(dto.get("kondms"))){
			String[] kondms = dto.get("kondms").toString().split(",");
			dto.put("kondms", kondms);
		} else {
			dto.put("kondms", null);
		}
		if(!G4Utils.isEmpty(dto.get("styleTypes"))){
			String[] styleTypes = dto.get("styleTypes").toString().split(",");
			dto.put("styleTypes", styleTypes);
		} else {
			dto.put("styleTypes", null);
		}
		if(!G4Utils.isEmpty(dto.get("goldTypes"))){
			String[] goldTypes = dto.get("goldTypes").toString().split(",");
			dto.put("goldTypes", goldTypes);
		} else {
			dto.put("goldTypes", null);
		}
		if(!G4Utils.isEmpty(dto.get("stoneTypes"))){
			String[] stoneTypes = dto.get("stoneTypes").toString().split(",");
			dto.put("stoneTypes", stoneTypes);
		} else {
			dto.put("stoneTypes", null);
		}
		if(!G4Utils.isEmpty(dto.get("stoneColors"))){
			String[] stoneColors = dto.get("stoneColors").toString().split(",");
			dto.put("stoneColors", stoneColors);
		} else {
			dto.put("stoneColors", null);
		}
		if(!G4Utils.isEmpty(dto.get("stoneLabors"))){
			String[] stoneLabors = dto.get("stoneLabors").toString().split(",");
			dto.put("stoneLabors", stoneLabors);
		} else {
			dto.put("stoneLabors", null);
		}
		List list = this.g4Reader.queryForPage("report.getStoreInfoList", dto);
		Integer count = (Integer) this.g4Reader.queryForObject("report.getStoreInfoListCount", dto);
		String retStr = JsonHelper.encodeList2PageJson(list, count, "yyyy-MM-dd");
		write(retStr, response);
		return mapping.findForward(null);
	}
	public static void main(String[] args) {
		int i = 1;
		System.out.println(11);
	}

}